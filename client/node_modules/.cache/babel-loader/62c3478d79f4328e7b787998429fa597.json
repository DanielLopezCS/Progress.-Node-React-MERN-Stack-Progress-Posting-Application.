{"ast":null,"code":"import axios from 'axios';\nimport setAuthToken from '../utils/setAuthToken';\nimport jwt_decode from 'jwt-decode';\nimport { GET_ERRORS, GET_STORIES, GET_CATEGORIES, POST_STORY, POST_EVENT, GET_STORY } from './types'; // GET Stories\n\nexport var getStories = function getStories() {\n  return function (dispatch) {\n    axios.get('/api/stories').then(function (res) {\n      return dispatch({\n        type: GET_STORIES,\n        payload: res.data\n      });\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; // GET Stories\n\nexport var getCategories = function getCategories() {\n  return function (dispatch) {\n    axios.get('/api/stories/utils/categories').then(function (res) {\n      return dispatch({\n        type: GET_CATEGORIES,\n        payload: res.data\n      });\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; // POST a story\n\nexport var postStory = function postStory(postData) {\n  return function (dispatch) {\n    axios.post('/api/stories', postData).then(function (res) {\n      return dispatch({\n        type: POST_STORY,\n        payload: res.data\n      });\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; // GET a story by id\n\nexport var getStory = function getStory(storyID) {\n  return function (dispatch) {\n    axios.get('/api/stories/', {\n      params: {\n        id: storyID\n      }\n    }).then(function (res) {\n      return dispatch({\n        type: GET_STORY,\n        payload: res.data\n      });\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n};","map":{"version":3,"sources":["C:\\Users\\Daniel\\Desktop\\progress\\client\\src\\actions\\storyActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","GET_STORIES","GET_CATEGORIES","POST_STORY","POST_EVENT","GET_STORY","getStories","dispatch","get","then","res","type","payload","data","catch","err","response","getCategories","postStory","postData","post","getStory","storyID","params","id"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,SAASC,UAAT,EAAqBC,WAArB,EAAkCC,cAAlC,EAAkDC,UAAlD,EAA8DC,UAA9D,EAA0EC,SAA1E,QAA2F,SAA3F,C,CAEA;;AACA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAM,UAAAC,QAAQ,EAAI;AAC1CV,IAAAA,KAAK,CACFW,GADH,CACO,cADP,EAEGC,IAFH,CAEQ,UAAAC,GAAG;AAAA,aACLH,QAAQ,CAAC;AACTI,QAAAA,IAAI,EAACV,WADI;AAETW,QAAAA,OAAO,EAAEF,GAAG,CAACG;AAFJ,OAAD,CADH;AAAA,KAFX,EAOGC,KAPH,CAOS,UAAAC,GAAG;AAAA,aACRR,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAEX,UADC;AAEPY,QAAAA,OAAO,EAAEG,GAAG,CAACC,QAAJ,CAAaH;AAFf,OAAD,CADA;AAAA,KAPZ;AAaD,GAdyB;AAAA,CAAnB,C,CAiBP;;AACA,OAAO,IAAMI,aAAa,GAAG,SAAhBA,aAAgB;AAAA,SAAM,UAAAV,QAAQ,EAAI;AAC7CV,IAAAA,KAAK,CACFW,GADH,CACO,+BADP,EAEGC,IAFH,CAEQ,UAAAC,GAAG;AAAA,aACLH,QAAQ,CAAC;AACTI,QAAAA,IAAI,EAACT,cADI;AAETU,QAAAA,OAAO,EAAEF,GAAG,CAACG;AAFJ,OAAD,CADH;AAAA,KAFX,EAOGC,KAPH,CAOS,UAAAC,GAAG;AAAA,aACRR,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAEX,UADC;AAEPY,QAAAA,OAAO,EAAEG,GAAG,CAACC,QAAJ,CAAaH;AAFf,OAAD,CADA;AAAA,KAPZ;AAaD,GAd4B;AAAA,CAAtB,C,CAiBP;;AACA,OAAO,IAAMK,SAAS,GAAG,SAAZA,SAAY,CAACC,QAAD;AAAA,SAAc,UAAAZ,QAAQ,EAAI;AACjDV,IAAAA,KAAK,CACFuB,IADH,CACQ,cADR,EACuBD,QADvB,EAEGV,IAFH,CAEQ,UAAAC,GAAG;AAAA,aACLH,QAAQ,CAAC;AACTI,QAAAA,IAAI,EAACR,UADI;AAETS,QAAAA,OAAO,EAAEF,GAAG,CAACG;AAFJ,OAAD,CADH;AAAA,KAFX,EAOGC,KAPH,CAOS,UAAAC,GAAG;AAAA,aACRR,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAEX,UADC;AAEPY,QAAAA,OAAO,EAAEG,GAAG,CAACC,QAAJ,CAAaH;AAFf,OAAD,CADA;AAAA,KAPZ;AAaD,GAdwB;AAAA,CAAlB,C,CAiBP;;AACA,OAAO,IAAMQ,QAAQ,GAAG,SAAXA,QAAW,CAACC,OAAD;AAAA,SAAa,UAAAf,QAAQ,EAAI;AAC/CV,IAAAA,KAAK,CACFW,GADH,CACO,eADP,EACuB;AACnBe,MAAAA,MAAM,EAAC;AACPC,QAAAA,EAAE,EAAEF;AADG;AADY,KADvB,EAKGb,IALH,CAKQ,UAAAC,GAAG;AAAA,aACLH,QAAQ,CAAC;AACTI,QAAAA,IAAI,EAACN,SADI;AAETO,QAAAA,OAAO,EAAEF,GAAG,CAACG;AAFJ,OAAD,CADH;AAAA,KALX,EAUGC,KAVH,CAUS,UAAAC,GAAG;AAAA,aACRR,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAEX,UADC;AAEPY,QAAAA,OAAO,EAAEG,GAAG,CAACC,QAAJ,CAAaH;AAFf,OAAD,CADA;AAAA,KAVZ;AAgBD,GAjBuB;AAAA,CAAjB","sourcesContent":["import axios from 'axios';\r\nimport setAuthToken from '../utils/setAuthToken';\r\nimport jwt_decode from 'jwt-decode';\r\n\r\nimport { GET_ERRORS, GET_STORIES, GET_CATEGORIES, POST_STORY, POST_EVENT, GET_STORY } from './types';\r\n\r\n// GET Stories\r\nexport const getStories = () => dispatch => {\r\n  axios\r\n    .get('/api/stories')\r\n    .then(res => \r\n        dispatch({\r\n        type:GET_STORIES,\r\n        payload: res.data,\r\n        }))\r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    );\r\n};\r\n\r\n\r\n// GET Stories\r\nexport const getCategories = () => dispatch => {\r\n  axios\r\n    .get('/api/stories/utils/categories')\r\n    .then(res => \r\n        dispatch({\r\n        type:GET_CATEGORIES,\r\n        payload: res.data,\r\n        }))\r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    );\r\n};\r\n\r\n\r\n// POST a story\r\nexport const postStory = (postData) => dispatch => {\r\n  axios\r\n    .post('/api/stories',postData)\r\n    .then(res => \r\n        dispatch({\r\n        type:POST_STORY,\r\n        payload: res.data,\r\n        }))\r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    );\r\n};\r\n\r\n\r\n// GET a story by id\r\nexport const getStory = (storyID) => dispatch => {\r\n  axios\r\n    .get('/api/stories/',{\r\n      params:{\r\n      id: storyID,\r\n    }})\r\n    .then(res => \r\n        dispatch({\r\n        type:GET_STORY,\r\n        payload: res.data,\r\n        }))\r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}